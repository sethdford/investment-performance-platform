AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template for Rust Lambda functions following AWS Well-Architected best practices

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Tracing: Active
    Environment:
      Variables:
        LOG_LEVEL: INFO
        RUST_BACKTRACE: 1
        TABLE_NAME: !Ref ItemsTable
        ENVIRONMENT: !Ref Environment

Resources:
  # API Lambda Function
  ApiFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: target/lambda/api-handler/
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - arm64
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemsTable
      Tags:
        Environment: !Ref Environment
        Application: rust-sam-app

  # Event Processor Lambda Function
  EventProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda/event-processor/
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - arm64
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EventQueue.Arn
            BatchSize: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemsTable
        - SQSPollerPolicy:
            QueueName: !GetAtt EventQueue.QueueName
      Tags:
        Environment: !Ref Environment
        Application: rust-sam-app

  # DynamoDB Table
  ItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-Items-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: rust-sam-app

  # SQS Queue
  EventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-Events-${Environment}
      VisibilityTimeout: 60
      MessageRetentionPeriod: 345600 # 4 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: rust-sam-app

  # Dead Letter Queue
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-DLQ-${Environment}
      MessageRetentionPeriod: 1209600 # 14 days
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: rust-sam-app

  # CloudWatch Alarms
  ApiErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-ApiErrors-${Environment}
      AlarmDescription: Alarm if API errors exceed threshold
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref ApiFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 5
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  DLQMessagesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-DLQMessages-${Environment}
      AlarmDescription: Alarm if messages appear in DLQ
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DeadLetterQueue.QueueName
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  
  ApiFunction:
    Description: "API Lambda Function ARN"
    Value: !GetAtt ApiFunction.Arn
  
  EventProcessorFunction:
    Description: "Event Processor Lambda Function ARN"
    Value: !GetAtt EventProcessorFunction.Arn
  
  ItemsTable:
    Description: "DynamoDB Table Name"
    Value: !Ref ItemsTable
  
  EventQueue:
    Description: "SQS Queue URL"
    Value: !Ref EventQueue
