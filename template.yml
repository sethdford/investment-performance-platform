AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Investment Performance Calculator - A serverless application for calculating investment performance metrics

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name

Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Runtime: provided.al2
    Architectures:
      - arm64
    Environment:
      Variables:
        RUST_BACKTRACE: 1
        RUST_LOG: info
        DYNAMODB_TABLE: !Ref DynamoDBTable
        TIMESTREAM_DATABASE: !Ref TimestreamDatabase
        TIMESTREAM_TABLE: !Ref TimestreamTable
        PROCESSING_QUEUE_URL: !Ref ProcessingQueue

Resources:
  # DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub investment-performance-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true

  # Timestream Database and Table
  TimestreamDatabase:
    Type: AWS::Timestream::Database
    Properties:
      DatabaseName: !Sub investment-performance-${Environment}

  TimestreamTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: !Ref TimestreamDatabase
      TableName: performance-metrics
      RetentionProperties:
        MemoryStoreRetentionPeriodInHours: 24
        MagneticStoreRetentionPeriodInDays: 365

  # SQS Queue for Processing
  ProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub investment-performance-processing-${Environment}
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600 # 14 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ProcessingDeadLetterQueue.Arn
        maxReceiveCount: 5

  ProcessingDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub investment-performance-processing-dlq-${Environment}
      MessageRetentionPeriod: 1209600 # 14 days

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 50
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayAccessLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","routeKey":"$context.routeKey","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength","integrationLatency":"$context.integrationLatency"}'

  ApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/investment-performance-${Environment}
      RetentionInDays: 30

  # Lambda Functions
  ApiHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api-handler/
      Handler: bootstrap
      Description: API Handler for Investment Performance Calculator
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/{proxy+}
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ProcessingQueue.QueueName

  DataIngestionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: data-ingestion/
      Handler: bootstrap
      Description: Data Ingestion Handler for Investment Performance Calculator
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /ingest/{proxy+}
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ProcessingQueue.QueueName

  PerformanceCalculatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: performance-lambda/
      Handler: bootstrap
      Description: Performance Calculator for Investment Performance Calculator
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ProcessingQueue.Arn
            BatchSize: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - Statement:
            - Effect: Allow
              Action:
                - timestream:WriteRecords
                - timestream:DescribeEndpoints
              Resource: !Sub arn:aws:timestream:${AWS::Region}:${AWS::AccountId}:database/${TimestreamDatabase}/table/${TimestreamTable}

  GraphQLApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: graphql-api/
      Handler: bootstrap
      Description: GraphQL API for Investment Performance Calculator
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /graphql
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - Statement:
            - Effect: Allow
              Action:
                - timestream:Select
                - timestream:DescribeEndpoints
              Resource: !Sub arn:aws:timestream:${AWS::Region}:${AWS::AccountId}:database/${TimestreamDatabase}/table/${TimestreamTable}

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}

  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref DynamoDBTable

  TimestreamDatabaseName:
    Description: Timestream database name
    Value: !Ref TimestreamDatabase

  TimestreamTableName:
    Description: Timestream table name
    Value: !Ref TimestreamTable

  ProcessingQueueUrl:
    Description: SQS queue URL for processing
    Value: !Ref ProcessingQueue 