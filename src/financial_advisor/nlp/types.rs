use serde::{Serialize, Deserialize};
use super::rule_based::{FinancialQueryIntent, EntityType, ProcessedQuery};

/// Confidence level for NLP responses
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Serialize, Deserialize)]
pub enum NlpConfidenceLevel {
    /// Very low confidence (0.0-0.2)
    VeryLow,
    
    /// Low confidence (0.2-0.4)
    Low,
    
    /// Medium confidence (0.4-0.6)
    Medium,
    
    /// High confidence (0.6-0.8)
    High,
    
    /// Very high confidence (0.8-1.0)
    VeryHigh,
}

impl NlpConfidenceLevel {
    /// Convert a confidence score to a confidence level
    pub fn from_score(score: f64) -> Self {
        match score {
            s if s < 0.2 => NlpConfidenceLevel::VeryLow,
            s if s < 0.4 => NlpConfidenceLevel::Low,
            s if s < 0.6 => NlpConfidenceLevel::Medium,
            s if s < 0.8 => NlpConfidenceLevel::High,
            _ => NlpConfidenceLevel::VeryHigh,
        }
    }
    
    /// Get the minimum confidence score for this level
    pub fn min_score(&self) -> f64 {
        match self {
            NlpConfidenceLevel::VeryLow => 0.0,
            NlpConfidenceLevel::Low => 0.2,
            NlpConfidenceLevel::Medium => 0.4,
            NlpConfidenceLevel::High => 0.6,
            NlpConfidenceLevel::VeryHigh => 0.8,
        }
    }
    
    /// Get the maximum confidence score for this level
    pub fn max_score(&self) -> f64 {
        match self {
            NlpConfidenceLevel::VeryLow => 0.2,
            NlpConfidenceLevel::Low => 0.4,
            NlpConfidenceLevel::Medium => 0.6,
            NlpConfidenceLevel::High => 0.8,
            NlpConfidenceLevel::VeryHigh => 1.0,
        }
    }
}

/// Source of an NLP response
#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize)]
pub enum NlpResponseSource {
    /// Rule-based NLP
    RuleBased,
    
    /// Bedrock LLM
    Bedrock,
    
    /// Hybrid (combined rule-based and LLM)
    Hybrid,
    
    /// Embeddings (generated using vector embeddings)
    Embeddings,
    
    /// Reasoning (generated by the reasoning module)
    Reasoning,
}

/// NLP response with metadata
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NlpResponse {
    /// Original query
    pub query: String,
    
    /// Recognized intent
    pub intent: FinancialQueryIntent,
    
    /// Confidence score (0.0 to 1.0)
    pub confidence: f64,
    
    /// Processed query (optional)
    pub processed_query: Option<ProcessedQuery>,
    
    /// Response text
    pub response_text: String,
    
    /// Source of the response
    pub source: NlpResponseSource,
    
    /// Confidence level
    pub confidence_level: NlpConfidenceLevel,
    
    /// Whether the response is uncertain
    pub is_uncertain: bool,
    
    /// Additional context or explanation
    pub explanation: Option<String>,
}

/// Validated LLM response
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ValidatedLlmResponse {
    /// Recognized intent
    pub intent: FinancialQueryIntent,
    
    /// Intent confidence score (0.0 to 1.0)
    pub intent_confidence: f64,
    
    /// Extracted entities
    pub entities: Vec<ValidatedEntity>,
    
    /// Whether the LLM is uncertain about the response
    pub is_uncertain: bool,
    
    /// Response text
    pub response_text: Option<String>,
    
    /// Explanation or reasoning
    pub explanation: Option<String>,
}

/// Validated entity from LLM
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ValidatedEntity {
    /// Entity type
    pub entity_type: EntityType,
    
    /// Entity value
    pub value: String,
    
    /// Confidence score (0.0 to 1.0)
    pub confidence: f64,
}

/// Client data for grounding LLM responses
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ClientData {
    /// Client ID
    pub client_id: String,
    
    /// Client name
    pub client_name: Option<String>,
    
    /// Portfolio data
    pub portfolio: Option<PortfolioData>,
    
    /// Goals data
    pub goals: Option<Vec<GoalData>>,
    
    /// Cash flow data
    pub cash_flow: Option<CashFlowData>,
    
    /// Tax data
    pub tax_data: Option<TaxData>,
}

/// Portfolio data for grounding LLM responses
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PortfolioData {
    /// Portfolio ID
    pub portfolio_id: String,
    
    /// Portfolio name
    pub portfolio_name: Option<String>,
    
    /// Total value
    pub total_value: f64,
    
    /// Asset allocation
    pub asset_allocation: Vec<AssetAllocation>,
    
    /// Performance data
    pub performance: PerformanceData,
}

/// Asset allocation for grounding LLM responses
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AssetAllocation {
    /// Asset class
    pub asset_class: String,
    
    /// Allocation percentage
    pub allocation_percentage: f64,
    
    /// Current value
    pub current_value: f64,
    
    /// Target allocation percentage
    pub target_allocation_percentage: Option<f64>,
}

/// Performance data for grounding LLM responses
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PerformanceData {
    /// Year-to-date return
    pub ytd_return: f64,
    
    /// 1-year return
    pub one_year_return: Option<f64>,
    
    /// 3-year annualized return
    pub three_year_return: Option<f64>,
    
    /// 5-year annualized return
    pub five_year_return: Option<f64>,
    
    /// Since inception annualized return
    pub since_inception_return: Option<f64>,
    
    /// Risk metrics
    pub risk_metrics: Option<RiskMetrics>,
}

/// Risk metrics for grounding LLM responses
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RiskMetrics {
    /// Standard deviation
    pub standard_deviation: f64,
    
    /// Sharpe ratio
    pub sharpe_ratio: Option<f64>,
    
    /// Maximum drawdown
    pub max_drawdown: Option<f64>,
    
    /// Beta
    pub beta: Option<f64>,
}

/// Goal data for grounding LLM responses
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GoalData {
    /// Goal ID
    pub goal_id: String,
    
    /// Goal name
    pub goal_name: String,
    
    /// Goal type
    pub goal_type: String,
    
    /// Target amount
    pub target_amount: f64,
    
    /// Current amount
    pub current_amount: f64,
    
    /// Funding percentage
    pub funding_percentage: f64,
    
    /// Target date
    pub target_date: String,
    
    /// Monthly contribution
    pub monthly_contribution: f64,
    
    /// On track status
    pub on_track: bool,
}

/// Cash flow data for grounding LLM responses
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CashFlowData {
    /// Monthly income
    pub monthly_income: f64,
    
    /// Monthly expenses
    pub monthly_expenses: f64,
    
    /// Monthly savings
    pub monthly_savings: f64,
    
    /// Savings rate
    pub savings_rate: f64,
}

/// Tax data for grounding LLM responses
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TaxData {
    /// Tax filing status
    pub filing_status: String,
    
    /// Federal tax bracket
    pub federal_tax_bracket: f64,
    
    /// State tax bracket
    pub state_tax_bracket: Option<f64>,
    
    /// Tax loss harvesting opportunities
    pub tax_loss_harvesting_opportunities: Option<f64>,
    
    /// Roth conversion opportunities
    pub roth_conversion_opportunities: Option<bool>,
}

/// LLM prompt template
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PromptTemplate {
    /// Template name
    pub name: String,
    
    /// Template text
    pub template: String,
    
    /// Template variables
    pub variables: Vec<String>,
} 