name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  AWS_REGION: us-east-1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      
      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
      
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: aarch64-unknown-linux-gnu
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Build API Handler
        run: |
          cd api-handler
          cargo build --release --target aarch64-unknown-linux-gnu
          mkdir -p bootstrap
          cp target/aarch64-unknown-linux-gnu/release/bootstrap bootstrap/
      
      - name: Build Event Processor
        run: |
          cd event-processor
          cargo build --release --target aarch64-unknown-linux-gnu
          mkdir -p bootstrap
          cp target/aarch64-unknown-linux-gnu/release/bootstrap bootstrap/
      
      - name: Build Performance Calculator
        run: |
          cd performance-calculator
          cargo build --release --target aarch64-unknown-linux-gnu
          mkdir -p bootstrap
          cp target/aarch64-unknown-linux-gnu/release/bootstrap bootstrap/
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: lambda-functions
          path: |
            api-handler/bootstrap/
            event-processor/bootstrap/
            performance-calculator/bootstrap/

  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: dev
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: lambda-functions
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy with SAM
        run: |
          sam deploy \
            --template-file cloudformation/template.yaml \
            --stack-name investment-performance-dev \
            --parameter-overrides Environment=dev \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-dev
    environment: prod
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: lambda-functions
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy with SAM
        run: |
          sam deploy \
            --template-file cloudformation/template.yaml \
            --stack-name investment-performance-prod \
            --parameter-overrides Environment=prod \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset 